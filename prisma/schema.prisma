generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.3.2")]
}

enum FieldCategory {
  BUILDING
  TUNNELS
  CHAIN_HOUSE
  GROWTH_HOUSES
  NETWORK_COVERAGE
  OPEN_SPACE
}

enum FieldStatus {
  IRRELEVANT
  TAKEN_CARE_OF
  REQUIRES_CARE
  IN_FOCAL_CARE
  UNDER_THE_CARE_OF_AN_AREA_MANAGER
  UNDER_THE_CARE_OF_A_COORDINATOR
  NOT_IN_TREATMENT
  ON_HOLD
}

enum Familiarity {
  IRRELEVANT
  NOT_KNOWN
  KNOWN_PICKED
  KNOWN_NOT_PICKED
}

enum Region {
  SOUTH
  NORTH
  CENTER
}

enum Product {
  UNALLOCATED
  AVOCADO
  WATERMELON
  PECAN
  PEAR
  PINEAPPLE
  PERSIMMON
  PEACH
  ARTICHOKE
  GRAPEFRUIT
  BASIL
  SWEET_POTATO
  BANANA
  GREEN_ONIONS
  ONION
  BROCCOLI
  GAMBA
  GIVAY
  CARROT
  CHERRY
  SQUASH
  PUMPKIN
  QUINCE
  LETTUCE
  EGGPLANT
  CORIANDER
  CABBAGE
  CAULIFLOWER
  LOVIA
  ARUM
  LEMON
  LICHY
  TURNIP
  CUCUMBER
  MANGO
  APRICOT
  MANDARIN
  NECTARINE
  BEET
  CELERY
  TOMATO
  CHERRY_TOMATO
  CHARD
  GRAPE
  POMELA
  POMLIT
  PARSLEY
  MUSHROOMS
  HOT_PEPPER
  PEPPER
  PASSIONFRUIT
  PAPAYA
  SABRA
  RADISH
  RADISHES
  MELON
  COLORBY
  KIWI
  ZUCCHINI
  CLEMENTINE
  CARAMBOLA
  POMEGRANATE
  GARLIC
  FENNEL
  PLUM
  LOQUAT
  DILL
  BEAN
  STRAWBERRY
  CORN
  DATE
  POTATO
  APPLE
  ORANGE
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  created_date DateTime @default(now())
}

model Geometry {
  Field    Field                    @relation(fields: [field_id], references: [id])
  field_id Int                      @id
  polygon  Unsupported("geometry")?
  point    Unsupported("geometry")?
}

model Field {
  id                           Int              @id @default(autoincrement())
  name                         String
  product_name                 Product?
  farmer_id                    String?
  region                       Region
  familiarity                  Familiarity
  familiarity_desc             String?
  sentinel_id                  String?
  latest_satellite_metric      Float?
  latest_satellite_date        DateTime?
  latest_attractiveness_metric Float?
  category                     FieldCategory?
  status                       FieldStatus
  status_date                  DateTime?        @default(now())
  delay_date                   DateTime?
  created_date                 DateTime         @default(now())
  Missions                     Mission[]
  Histories                    History[]
  Satellites                   Satellite[]
  Attractivenesses             Attractiveness[]
  Geometry                     Geometry?

  @@index(fields: [latest_satellite_metric, latest_attractiveness_metric, status_date], type: BTree)
  @@index(fields: [latest_attractiveness_metric, latest_satellite_metric, status_date], type: BTree)
  @@index(fields: [status_date, latest_satellite_metric, latest_attractiveness_metric], type: BTree)
  @@index(fields: [status_date, latest_attractiveness_metric, latest_satellite_metric], type: BTree)
  @@index(fields: [latest_satellite_metric, status_date, latest_attractiveness_metric], type: BTree)
  @@index(fields: [delay_date, status], type: BTree)
  @@index(fields: [name], type: SpGist)
}

model Satellite {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  field       Field    @relation(fields: [field_id], references: [id])
  field_id    Int
  ndvi_max    Float?
  ndvi_min    Float?
  ndvi_std    Float?
  ndvi_mean   Float
  ndvi_median Float?
  like        Boolean?

  @@index(fields: [field_id], type: Hash)
}

model Attractiveness {
  id              Int      @id @default(autoincrement())
  field           Field    @relation(fields: [field_id], references: [id])
  field_id        Int
  date            DateTime @default(now())
  mission_score   Float
  market_score    Float
  satellite_score Float
  average_score   Float
  like            Boolean?
}

model Market {
  id           Int      @id @default(autoincrement())
  date         DateTime
  product_name Product
  price        Float

  @@index([product_name])
}

model Mission {
  id              Int      @id @default(autoincrement())
  date            DateTime @default(now())
  field           Field    @relation(fields: [field_id], references: [id])
  field_id        Int
  product_name    Product
  amount_kg       Float
  was_ripe        String
  was_picked      Boolean
  not_picked_desc String

  @@index([field_id], type: Hash)
}

model History {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  field        Field    @relation(fields: [field_id], references: [id])
  field_id     Int
  product_name Product
  farmer_id    String

  @@index([field_id], type: Hash)
}
